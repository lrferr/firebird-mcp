#!/usr/bin/env node

/**
 * Script simples para testar a aplica√ß√£o Firebird MCP Server
 * CSGD/AGTIC/UFPR
 */

import chalk from 'chalk';
import { ConnectionManager } from './src/connection-manager.js';
import { FirebirdMonitor } from './src/firebird-monitor.js';

console.log(chalk.blue('üß™ Testando Firebird MCP Server - CSGD/AGTIC/UFPR\n'));

async function testApplication() {
  try {
    console.log(chalk.yellow('1. Testando ConnectionManager...'));
    const connectionManager = new ConnectionManager();
    console.log(chalk.green('   ‚úÖ ConnectionManager criado com sucesso'));

    console.log(chalk.yellow('\n2. Testando FirebirdMonitor...'));
    const monitor = new FirebirdMonitor(connectionManager);
    console.log(chalk.green('   ‚úÖ FirebirdMonitor criado com sucesso'));

    console.log(chalk.yellow('\n3. Verificando configura√ß√µes...'));
    const connections = connectionManager.getAvailableConnections();
    console.log(chalk.gray(`   üìä ${connections.length} conex√£o(√µes) configurada(s)`));

    console.log(chalk.yellow('\n4. Verificando arquivos de configura√ß√£o...'));
    const fs = await import('fs');
    const configFiles = [
      'config/firebird.json',
      'config/security-config.json',
      'config/multi-connections.json'
    ];

    for (const file of configFiles) {
      if (fs.existsSync(file)) {
        console.log(chalk.green(`   ‚úÖ ${file}`));
      } else {
        console.log(chalk.red(`   ‚ùå ${file} n√£o encontrado`));
      }
    }

    console.log(chalk.green('\nüéâ Teste b√°sico da aplica√ß√£o conclu√≠do com sucesso!'));
    console.log(chalk.gray('\nPara testar a conex√£o com o banco, execute:'));
    console.log(chalk.gray('npm run test-connection'));

  } catch (error) {
    console.log(chalk.red('\n‚ùå Erro no teste:'), error.message);
    process.exit(1);
  }
}

testApplication();
